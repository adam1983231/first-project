import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import asyncio
import logging
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "6388163209:AAHT9wHQBdTXaFieGrWMc9RqmSX-MoilpIM"
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
CURRENCIES = {
    "USD": {"name": "–î–æ–ª–ª–∞—Ä –°–®–ê", "symbol": "üíµ", "flag": "üá∫üá∏"},
    "EUR": {"name": "–ï–≤—Ä–æ", "symbol": "üí∂", "flag": "üá™üá∫"},
    "CNY": {"name": "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "symbol": "üí¥", "flag": "üá®üá≥"},
    "TRY": {"name": "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", "symbol": "üáπüá∑", "flag": "üáπüá∑"},
    "JPY": {"name": "–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞", "symbol": "üí¥", "flag": "üáØüáµ"}
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_favorites = defaultdict(set)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def fetch_currency_data():
    try:
        response = await asyncio.to_thread(requests.get, CBR_API_URL)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_currency_info(currency_code, data):
    if not data or 'Valute' not in data:
        return None
        
    currency = data['Valute'].get(currency_code)
    if not currency:
        return None
        
    return {
        'name': CURRENCIES[currency_code]['name'],
        'symbol': CURRENCIES[currency_code]['symbol'],
        'flag': CURRENCIES[currency_code]['flag'],
        'value': currency['Value'],
        'previous': currency['Previous'],
        'change': currency['Value'] - currency['Previous'],
        'change_percent': (currency['Value'] / currency['Previous'] - 1) * 100
    }

def generate_currency_chart(currency_data, days=7):
    dates = [datetime.now() - timedelta(days=i) for i in range(days, -1, -1)]
    values = [100 + i*2 for i in range(days+1)]  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è data
    
    plt.figure(figsize=(10, 5))
    plt.plot(dates, values, marker='o', linestyle='-', color='#4CAF50')
    plt.title(f"{currency_data['flag']} –î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {currency_data['name']} –∑–∞ {days} –¥–Ω–µ–π", pad=20)
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö—É—Ä—Å, —Ä—É–±')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=80)
    buf.seek(0)
    plt.close()
    return buf

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton(f"{CURRENCIES['USD']['flag']} –î–æ–ª–ª–∞—Ä", callback_data='USD'),
         InlineKeyboardButton(f"{CURRENCIES['EUR']['flag']} –ï–≤—Ä–æ", callback_data='EUR')],
        [InlineKeyboardButton(f"{CURRENCIES['CNY']['flag']} –Æ–∞–Ω—å", callback_data='CNY'),
         InlineKeyboardButton(f"{CURRENCIES['TRY']['flag']} –õ–∏—Ä–∞", callback_data='TRY')],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites'),
         InlineKeyboardButton("üìä –í—Å–µ –∫—É—Ä—Å—ã", callback_data='all')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about'),
         InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == 'about':
        await query.edit_message_text(
            text="<b>üí∞ CurrencyBot Pro</b>\n\n"
                 "üîπ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§\n"
                 "üîπ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
                 "üîπ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n"
                 "üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n"
                 "üìä <i>–°–∞–º—ã–π —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤!</i>",
            parse_mode='HTML'
        )
        return
    
    if query.data == 'favorites':
        if not user_favorites[user_id]:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
            return
            
        keyboard = []
        for currency_code in user_favorites[user_id]:
            currency = CURRENCIES.get(currency_code, {})
            keyboard.append([InlineKeyboardButton(
                f"{currency.get('flag', '')} {currency.get('name', currency_code)}", 
                callback_data=currency_code
            )])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return
    
    if query.data == 'all':
        data = await fetch_currency_data()
        if not data:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        message_text = "üìä <b>–í—Å–µ –∫—É—Ä—Å—ã –¶–ë –†–§</b>\n\n"
        for code, currency in CURRENCIES.items():
            if code in data['Valute']:
                val = data['Valute'][code]
                change = val['Value'] - val['Previous']
                change_percent = (val['Value'] / val['Previous'] - 1) * 100
                arrow = "üìà" if change > 0 else "üìâ"
                message_text += (
                    f"{currency['flag']} <b>{currency['name']}</b>: {val['Value']:.2f} —Ä—É–±.\n"
                    f"{arrow} {change:+.2f} ({change_percent:+.2f}%)\n\n"
                )
        
        await query.edit_message_text(
            message_text,
            parse_mode='HTML'
        )
        return
    
    if query.data == 'subscribe':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await query.edit_message_text(
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤?\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!",
            parse_mode='HTML'
        )
        return
    
    if query.data == 'back':
        await start(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    if query.data in CURRENCIES:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
        if hasattr(query, 'data_long') and query.data_long:
            user_favorites[user_id].add(query.data)
            await query.answer(f"{CURRENCIES[query.data]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    
    data = await fetch_currency_data()
    if not data:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    currency_info = get_currency_info(query.data, data)
    if not currency_info:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    if currency_info['change'] > 0:
        change_emoji = "üìà"
        change_text = f"+{currency_info['change']:.2f} ({currency_info['change_percent']:.2f}%)"
    else:
        change_emoji = "üìâ"
        change_text = f"{currency_info['change']:.2f} ({currency_info['change_percent']:.2f}%)"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart = generate_currency_chart(currency_info)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
    keyboard = [
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f'chart_7_{query.data}'),
         InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f'chart_30_{query.data}')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f'add_{query.data}')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=chart,
            caption=f"{currency_info['flag']} <b>{currency_info['name']}</b>\n\n"
                    f"<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {currency_info['value']:.2f} —Ä—É–±.\n"
                    f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change_emoji} {change_text}\n\n"
                    f"<i>–î–∞–Ω–Ω—ã–µ –¶–ë –†–§ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if any(word in text for word in ['–∫—É—Ä—Å', '–≤–∞–ª—é—Ç', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '—é–∞–Ω—å']):
        await start(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç",
            parse_mode='HTML'
        )

def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()