import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7672838723:AAEOWL1XxhSSV3VCBn7owLmBy4ky5mgMXYc"
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
CURRENCIES = {
    "USD": {"name": "–î–æ–ª–ª–∞—Ä –°–®–ê", "symbol": "üíµ"},
    "EUR": {"name": "–ï–≤—Ä–æ", "symbol": "üí∂"},
    "CNY": {"name": "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "symbol": "üí¥"}
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def fetch_currency_data():
    try:
        response = await asyncio.to_thread(requests.get, CBR_API_URL)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_currency_info(currency_code, data):
    if not data or 'Valute' not in data:
        return None
        
    currency = data['Valute'].get(currency_code)
    if not currency:
        return None
        
    return {
        'name': CURRENCIES[currency_code]['name'],
        'symbol': CURRENCIES[currency_code]['symbol'],
        'value': currency['Value'],
        'previous': currency['Previous'],
        'change': currency['Value'] - currency['Previous'],
        'change_percent': (currency['Value'] / currency['Previous'] - 1) * 100
    }

def generate_currency_chart(currency_data):
    dates = [datetime.now() - timedelta(days=i) for i in range(7, -1, -1)]
    values = [100 + i*2 for i in range(8)]  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è data
    
    plt.figure(figsize=(10, 5))
    plt.plot(dates, values, marker='o', linestyle='-', color='#4CAF50')
    plt.title(f"–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {currency_data['name']} –∑–∞ –Ω–µ–¥–µ–ª—é", pad=20)
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö—É—Ä—Å, —Ä—É–±')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=80)
    buf.seek(0)
    plt.close()
    return buf

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"{CURRENCIES['USD']['symbol']} –î–æ–ª–ª–∞—Ä", callback_data='USD')],
        [InlineKeyboardButton(f"{CURRENCIES['EUR']['symbol']} –ï–≤—Ä–æ", callback_data='EUR')],
        [InlineKeyboardButton(f"{CURRENCIES['CNY']['symbol']} –Æ–∞–Ω—å", callback_data='CNY')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'about':
        await query.edit_message_text(
            text="<b>üí∞ –ë–æ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç</b>\n\n"
                 "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n"
                 "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n"
                 "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @–≤–∞—à_–Ω–∏–∫",
            parse_mode='HTML'
        )
        return
    
    data = await fetch_currency_data()
    if not data:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    currency_info = get_currency_info(query.data, data)
    if not currency_info:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    if currency_info['change'] > 0:
        change_emoji = "üìà"
        change_text = f"+{currency_info['change']:.2f} ({currency_info['change_percent']:.2f}%)"
    else:
        change_emoji = "üìâ"
        change_text = f"{currency_info['change']:.2f} ({currency_info['change_percent']:.2f}%)"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart = generate_currency_chart(currency_info)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ span)
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=chart,
            caption=f"{currency_info['symbol']} <b>{currency_info['name']}</b>\n\n"
                    f"<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {currency_info['value']:.2f} —Ä—É–±.\n"
                    f"<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change_emoji} {change_text}\n\n"
                    f"<i>–î–∞–Ω–Ω—ã–µ –¶–ë –†–§ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()